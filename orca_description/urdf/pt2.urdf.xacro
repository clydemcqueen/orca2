<?xml version="1.0"?>

<!--
  Hardware build for pool test #2
-->

<robot name="orca" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Orca constants -->
  <xacro:property name="TOTAL_MASS" value="10"/>
  <xacro:property name="TOTAL_VOLUME" value="0.01"/>
  <xacro:property name="LENGTH" value="0.457"/>
  <xacro:property name="WIDTH" value="0.338"/>
  <xacro:property name="HEIGHT" value="0.254"/>
  <xacro:property name="IXX" value="${TOTAL_MASS / 12 * (WIDTH * WIDTH + HEIGHT * HEIGHT)}"/>
  <xacro:property name="IYY" value="${TOTAL_MASS / 12 * (LENGTH * LENGTH + HEIGHT * HEIGHT)}"/>
  <xacro:property name="IZZ" value="${TOTAL_MASS / 12 * (LENGTH * LENGTH + WIDTH * WIDTH)}"/>
  <xacro:property name="FLOAT_X" value="0.12"/>
  <xacro:property name="FLOAT_Y" value="0.11"/>
  <xacro:property name="FLOAT_Z" value="0.07"/>
  <xacro:property name="THRUSTER_X" value="0.15"/>
  <xacro:property name="THRUSTER_Y" value="0.09"/>
  <xacro:property name="THRUSTER_Z" value="-0.009"/>
  <xacro:property name="VERT_THRUSTER_Y" value="0.105"/>
  <xacro:property name="VERT_THRUSTER_Z" value="0.09"/>
  <xacro:property name="MASS_Z" value="0.011"/>
  <xacro:property name="FORWARD_FORCE" value="50"/>
  <xacro:property name="REVERSE_FORCE" value="40"/>
  <xacro:property name="HAS_TETHER" default="false"/>
  <xacro:property name="SURFACE" default="0"/>

  <!-- Physics properties -->
  <xacro:property name="FLUID_DENSITY" value="1029"/>
  <xacro:property name="DISPLACED_MASS" value="${TOTAL_VOLUME*FLUID_DENSITY}"/>

  <!-- General constants -->
  <xacro:property name="PI" value="3.1415926535897931"/>

  <!-- Materials -->
  <material name="gray"><color rgba="0.5 0.5 0.5 1.0"/></material>
  <material name="blue"><color rgba="0.5 0.5 1.0 1.0"/></material>
  <material name="red"><color rgba="1.0 0.0 0.0 1.0"/></material>

  <!-- Thruster origins -->
  <xacro:property name="front_right_origin">
    <origin xyz="${THRUSTER_X} ${-THRUSTER_Y} ${THRUSTER_Z}" rpy="0 ${PI/2} ${PI/4}"/>
  </xacro:property>
  <xacro:property name="front_left_origin">
    <origin xyz="${THRUSTER_X} ${THRUSTER_Y} ${THRUSTER_Z}" rpy="0 ${PI/2} ${-PI/4}"/>
  </xacro:property>
  <xacro:property name="rear_right_origin">
    <origin xyz="${-THRUSTER_X} ${-THRUSTER_Y} ${THRUSTER_Z}" rpy="0 ${PI/2} ${PI*3/4}"/>
  </xacro:property>
  <xacro:property name="rear_left_origin">
    <origin xyz="${-THRUSTER_X} ${THRUSTER_Y} ${THRUSTER_Z}" rpy="0 ${PI/2} ${-PI*3/4}"/>
  </xacro:property>
  <xacro:property name="vertical_right_origin">
    <origin xyz="0 ${-VERT_THRUSTER_Y} ${VERT_THRUSTER_Z}" rpy="0 0 0"/>
  </xacro:property>
  <xacro:property name="vertical_left_origin">
    <origin xyz="0 ${VERT_THRUSTER_Y} ${VERT_THRUSTER_Z}" rpy="0 0 0"/>
  </xacro:property>

  <!-- Thruster macro -->
  <xacro:macro name="t200" params="name *origin">
    <link name="t200_link_${name}">
      <!-- Front cone -->
      <visual>
        <origin xyz="0 0 0"/>
        <geometry><sphere radius="0.02"/></geometry>
        <material name="gray"/> <!-- All visual elements in this link pick up this material -->
      </visual>
      <!-- Rear cone -->
      <visual>
        <origin xyz="0 0 -0.07"/>
        <geometry><sphere radius="0.02"/></geometry>
      </visual>
      <!-- Thruster body -->
      <visual>
        <origin xyz="0 0 -0.035"/>
        <geometry><cylinder length="0.07" radius="0.02"/></geometry>
      </visual>
      <!-- Propeller guard -->
      <visual>
        <origin xyz="0 0 -0.0225"/>
        <geometry><cylinder length="0.045" radius="0.045"/></geometry>
      </visual>
    </link>
    <joint name="t200_joint_${name}" type="fixed">
      <xacro:insert_block name="origin" />
      <parent link="base_link"/>
      <child link="t200_link_${name}"/>
    </joint>
  </xacro:macro>

  <!-- Base link -->
  <link name="base_link">
    <!-- Inertial -->
    <inertial>
      <origin xyz="0 0 ${MASS_Z}"/> <!-- Center of mass -->
      <mass value="${TOTAL_MASS}"/>
      <inertia ixx="${IXX}" ixy="0.0" ixz="0.0" iyy="${IYY}" iyz="0.0" izz="${IZZ}"/>
    </inertial>
    <!-- Float -->
    <visual>
      <origin xyz="${FLOAT_X} ${FLOAT_Y} ${FLOAT_Z}"/>
      <geometry><box size="0.15 0.09 0.08"/></geometry>
      <material name="blue"/>
    </visual>
    <!-- Float -->
    <visual>
      <origin xyz="${FLOAT_X} ${-FLOAT_Y} ${FLOAT_Z}"/>
      <geometry><box size="0.15 0.09 0.08"/></geometry>
    </visual>
    <!-- Float -->
    <visual>
      <origin xyz="${-FLOAT_X} ${FLOAT_Y} ${FLOAT_Z}"/>
      <geometry><box size="0.15 0.09 0.08"/></geometry>
    </visual>
    <!-- Float -->
    <visual>
      <origin xyz="${-FLOAT_X} ${-FLOAT_Y} ${FLOAT_Z}"/>
      <geometry><box size="0.15 0.09 0.08"/></geometry>
    </visual>
    <!-- Electronics tube -->
    <visual>
      <origin xyz="0 0 0.063" rpy="0 ${PI/2} 0"/>
      <geometry><cylinder length="0.32" radius="0.055"/></geometry>
    </visual>
    <!-- Battery tube -->
    <visual>
      <origin xyz="0 0 -0.05" rpy="0 ${PI/2} 0"/>
      <geometry><cylinder length="0.25" radius="0.045"/></geometry>
    </visual>
    <!-- Collision region -->
    <collision>
      <geometry><box size="${LENGTH} ${WIDTH} ${HEIGHT}"/></geometry>
    </collision>
  </link>

  <!-- Forward camera -->
  <link name="forward_camera_link">
    <!-- Camera hemisphere -->
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry><sphere radius="0.052"/></geometry>
      <material name="red"/>
    </visual>
  </link>

  <!-- Attach forward camera to base_link -->
  <joint name="forward_camera_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="0.16 0 0.063" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="forward_camera_link"/>
  </joint>

  <!-- Attach thrusters to the base_link -->
  <xacro:t200 name="front_right">
    <xacro:insert_block name="front_right_origin"/>
  </xacro:t200>
  <xacro:t200 name="front_left">
    <xacro:insert_block name="front_left_origin"/>
  </xacro:t200>
  <xacro:t200 name="rear_right">
    <xacro:insert_block name="rear_right_origin"/>
  </xacro:t200>
  <xacro:t200 name="rear_left">
    <xacro:insert_block name="rear_left_origin"/>
  </xacro:t200>
  <xacro:t200 name="vertical_right">
    <xacro:insert_block name="vertical_right_origin"/>
  </xacro:t200>
  <xacro:t200 name="vertical_left">
    <xacro:insert_block name="vertical_left_origin"/>
  </xacro:t200>

  <!--
    The OrcaBuoyancyPlugin applies a force that counteracts gravity.
    Buoyancy force is not applied if the link is above the surface of the water.
  -->
  <gazebo>
    <plugin name="OrcaBuoyancyPlugin" filename="libOrcaBuoyancyPlugin.so">
      <fluid_density>${FLUID_DENSITY}</fluid_density>
      <link name="base_link">
        <center_of_volume>0 0 0.06</center_of_volume>
        <volume>${TOTAL_VOLUME}</volume>
      </link>
    </plugin>
  </gazebo>

  <!--
  The OrcaDragPlugin applies a drag force proportional to velocity^2.
  -->
  <gazebo>
    <plugin name="OrcaDragPlugin" filename="libOrcaDragPlugin.so">
      <link name="base_link">
        <center_of_mass>0 0 ${MASS_Z}</center_of_mass>
        <tether_attach>-0.25 0 ${THRUSTER_Z}</tether_attach>
        <xacro:unless value="${HAS_TETHER}">
          <tether_drag>0</tether_drag>
        </xacro:unless>
      </link>
    </plugin>
  </gazebo>

  <!--
    The OrcaThrusterPlugin turns ROS messages into thrust forces. Each message contains an array of thrust efforts [-1.0, 1.0].
    The URDF to SDF translation nukes the joints, so joint locations must appear here.
  -->
  <gazebo>
    <plugin name="OrcaThrusterPlugin" filename="libOrcaThrusterPlugin.so">
      <link_name>orca::base_link</link_name>
      <thruster name="front_right"> <!-- name attributes are ignored; the tag order must match the message array order -->
        <pos_force>${FORWARD_FORCE}</pos_force> <!-- units are N, positive for ccw, negative for cw -->
        <neg_force>${REVERSE_FORCE}</neg_force> <!-- units are N, positive for ccw, negative for cw -->
        <xacro:insert_block name="front_right_origin"/>
      </thruster>
      <thruster name="front_left">
        <pos_force>${FORWARD_FORCE}</pos_force>
        <neg_force>${REVERSE_FORCE}</neg_force>
        <xacro:insert_block name="front_left_origin"/>
      </thruster>
      <thruster name="rear_right">
        <pos_force>${-REVERSE_FORCE}</pos_force>
        <neg_force>${-FORWARD_FORCE}</neg_force>
        <xacro:insert_block name="rear_right_origin"/>
      </thruster>
      <thruster name="rear_left">
        <pos_force>${-REVERSE_FORCE}</pos_force>
        <neg_force>${-FORWARD_FORCE}</neg_force>
        <xacro:insert_block name="rear_left_origin"/>
      </thruster>
      <thruster name="vertical_right">
        <pos_force>${FORWARD_FORCE}</pos_force>
        <neg_force>${REVERSE_FORCE}</neg_force>
        <xacro:insert_block name="vertical_right_origin"/>
      </thruster>
      <thruster name="vertical_left">
        <pos_force>${-REVERSE_FORCE}</pos_force>
        <neg_force>${-FORWARD_FORCE}</neg_force>
        <xacro:insert_block name="vertical_left_origin"/>
      </thruster>
    </plugin>
  </gazebo>

  <!--
    The OrcaBarometerPlugin (wraps a Gazebo altimeter sensor) simulates a barometer sensor such as the BlueRobotics Bar30.
  -->
  <gazebo reference="base_link">
    <sensor name="barometer_sensor" type="altimeter">
      <update_rate>50</update_rate> <!-- Match orca_driver rate -->
      <plugin name="OrcaBarometerPlugin" filename="libOrcaBarometerPlugin.so">
        <fluid_density>${FLUID_DENSITY}</fluid_density>
      </plugin>
    </sensor>
  </gazebo>

  <!--
    The camera_controller plugin (wraps a Gazebo camera sensor) simulates a camera driver.
    Forward-facing camera driver:
  -->
  <gazebo reference="forward_camera_link">
    <sensor type="camera" name="forward_camera">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.4</horizontal_fov>
        <image>
          <width>800</width>
          <height>600</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>orca/forward_camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>forward_camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

</robot>
